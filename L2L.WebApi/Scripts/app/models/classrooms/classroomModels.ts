
interface IQuizzClassModel extends IImageEditorControl {
    id?: number;
    membershipNeedsApproval?: boolean;
    isDeleted?: boolean;
    className?: string;
    description?: string;
    tags?: string;
    quizzClassLessonIdx?: number;
    quizzChatGuid?: string;

    // foreign keys
    teacherId?: number;

    // generated
    isTeacherQuizzmate?: boolean;
    teacherUserName?: string;
    teacherFullName?: string;
    numStudents?: number;
    numMaterials?: number;
    numStudentJoinRequests?: number;
    numNewInviteAccepts?: number;
    latestAnnouncement?: string;
    latestAnnouncementPosteDate?: Date;
    isRequestSent?: boolean;
    isInviteSent?: boolean;
    isMember?: boolean;
    member?: IQuizzClassMemberModel;
    numComments?: number;

    // generated from code
    isTeacher?: boolean;
    teacherName?: string;
    numNewLessonItemCount?: number;

    // for view
    isOpen?: boolean;
    disabled?: boolean;
    resendRequestItem?: IItemToWait;
    cancelRequestItem?: IItemToWait;
    acceptRequestItem?: IItemToWait;
    rejectRequestItem?: IItemToWait;
}

interface IQuizzClassCommentModel {
    id?: number;
    postedDate?: Date;
    comment?: string;
    isDeleted?: boolean;

    // foreign keys
    authorId?: number;
    quizzClassId?: number;

    // generated
    isQuizzmate?: boolean;
    authorName?: string;
    authorUserName?: string;
    authoreFullName?: string;
    authorProfilePixUrl?: string;
    

    // generated by code
    isNew?: boolean;
    isAuthor?: boolean;

    // for view
    isOpen?: boolean;
}

//####################### Class Announcement ####################
interface IQuizzClassAnnouncementModel {
    id?: number;
    announcement?: string;
    postedDate?: Date;
    quizzClassId?: number;

    // for view
    isOpen?: boolean;

    // generated from code
    isNew?: boolean;
}

interface IQuizzClassQuizzModel {
    id?: number;
    postedDate?: Date;

    // foreign keys
    quizzId?: number;
    quizzClassId?: number;
}

//####################### Class Lessons ####################
interface IQuizzClassLessonModel {
    id?: number;
    quizzClassLessonIdx?: number;
    title?: string;
    description?: string;
    isDeleted?: boolean;

    // foreign keys
    quizzClassId?: number;

    // generated by query
    quizzClassName?: string;
    quizzClassDescription?: string;
    quizzClassImageUrl?: string;
    isTeacherQuizzmate?: boolean;
    teacherId?: number;
    teacherUserName?: string;
    teacherFullName?: string;
    member?: IQuizzClassMemberModel;
    numComments?: number;

    // generated from code
    isNew?: boolean;
    isTeacher?: boolean;
    teacherName?: string;
    newMaterialCount?: number;
    newMessageCount?: number;
    newCommentCount?: number;
    newQuizzCount?: number;

    // for Views
    isOpen?: boolean;
}

interface IQuizzClassLessonMessageModel extends IEditorControl {
    id?: number;
    postedDate?: Date;
    message?: string;
    isDeleted?: boolean;

    // Foreign Keys
    quizzClassLessonId?: number;

    // not saved in entity
    quizzClassId?: number;
    quizzClassLessonIdx?: number;

    // generated by code
    isNew?: boolean;
}

interface IQuizzClassLessonCommentModel {
    id?: number;
    postedDate?: Date;
    comment?: string;
    isDeleted?: boolean;

   
    // Foreign keys
    quizzClassLessonId?: number;
    authorId?: number;

    // generated by query
    quizzClassId?: number;
    quizzClassLessonIdx?: number;
    authorUserName?: string;
    authorFullName?: string;
    authorProfilePixUrl?: string;
    isQuizzmate?: boolean;
    isAuthor?: boolean;
    isTeacher?: boolean;

    // generated by code
    authorName?: string;
    isNew?: boolean;

    // for view
    isOpen?: boolean;
}

interface IQuizzClassLessonQuizzModel {
    id?: number;
    postedDate?: Date;

    // foreign keys
    quizzId?: number;
    quizzClassId?: number;
    quizzClassLessonId?: number;
}

//######################### Class Member ###################
interface IQuizzClassMemberModel {
    id: number;
    isNew: boolean;
    isNewInviteAccepted?: boolean;
    hasNew: boolean;
    newChatCount: number;
    newClassCommentCount: number;
    newClassMaterialCount: number;
    newAnnouncementCount: number;
    newClassLesson: number;
    newClassQuizzCount: number;

    newLessonMaterialCount: string;
    newLessonCommentCount: string;
    newLessonMessageCount: string;
    newLessonQuizzCount: string;

    // Foreign Keys
    quizzClassId: number;
    studentId: number;
    dependentId?: number;

    // generated by query
    isQuizzmate: boolean;
    studentUserName: string;
    studentFullName: string;
    studentProfilePixUrl: string;

    // generated by code
    studentName: string;

    // for view
    disabled?: boolean;
    dropStudentItem?: IItemToWait;
}

interface IQuizzClassJoinRequestModel {
    id?: number;
    postedDate?: Date;
    isDeleted?: boolean;
    isAccepted?: boolean;
    isNew?: boolean;
    message?: string;

    // foreign keys
    quizzClassId?: number;
    userId?: number;

    // generated by query
    isQuizzmate?: boolean;
    userUserName?: string;
    usrFullName?: string;
    userProfilePixUrl?: string;

    // generated by code
    userName?: string;

    // for view
    disabled?: boolean;
    acceptRequestItem?: IItemToWait;
    rejectRequestItem?: IItemToWait;
}

interface IQuizzClassInviteRequestModel {
    id?: number;
    postedDate?: Date;
    isDeleted?: boolean;
    isAccepted?: boolean;
    isNew?: boolean;
    message?: string;

    // foreign keys
    quizzClassId?: number;
    userId?: number;

    // generated by query
    isQuizzmate?: boolean;
    userUserName?: string;
    userFullName?: string;
    userBirthdate?: Date;
    userProfilePixUrl?: string;
    className?: string;
    description?: string;
    tags?: string;
    teacherUserName?: string;
    teacherFullName?: string;
    teacherBirthdate?: Date;
    imageUrl?: string;

    // generated by code
    userName?: string;
    teacherName?: string;
    userAge?: number;
    teacherAge?: number;

    // for view
    disabled?: boolean;
    acceptRequestItem?: IItemToWait;
    rejectRequestItem?: IItemToWait;
}


